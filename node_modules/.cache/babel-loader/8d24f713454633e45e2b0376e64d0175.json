{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanswindell/Documents/Base/Academics/2022-2023 Senior/Spring Semester/CPE 496 Senior Design 2/GoogleMaps/src/components/Layout/Header.js\",\n  _s = $RefreshSig$();\nimport React, { useState, Fragment } from \"react\";\nimport classes from './Header.module.css';\nimport backgroundImage from '../../assets/background.jpg';\nimport HeaderCartButton from \"./HeaderCartButton\";\nimport HeaderInput from \"./HeaderInput\";\nimport Papa from \"papaparse\";\n\n// Allowed extensions for input file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allowedExtensions = [\"csv\"];\nconst Header = props => {\n  _s();\n  // This state will store the parsed data\n  const [data, setData] = useState([]);\n\n  // It state will contain the error when\n  // correct file extension is not used\n  const [error, setError] = useState(\"\");\n\n  // It will store the file uploaded by the user\n  const [file, setFile] = useState(\"\");\n\n  // This function will be called when\n  // the file input changes\n  const handleFileChange = e => {\n    setError(\"\");\n\n    // Check if user has entered the file\n    if (e.target.files.length) {\n      const inputFile = e.target.files[0];\n\n      // Check the file extensions, if it not\n      // included in the allowed extensions\n      // we show the error\n      const fileExtension = inputFile === null || inputFile === void 0 ? void 0 : inputFile.type.split(\"/\")[1];\n      if (!allowedExtensions.includes(fileExtension)) {\n        setError(\"Please input a csv file\");\n        return;\n      }\n      // If input type is correct set the state\n      setFile(inputFile);\n    }\n  };\n  const handleParse = () => {\n    // If user clicks the parse button without\n    // a file we show a error\n    if (!file) return setError(\"Enter a valid file\");\n\n    // Initialize a reader which allows user\n    // to read any file or blob.\n    const reader = new FileReader();\n\n    // Event listener on reader when the file\n    // loads, we parse it and set the data.\n    reader.onload = async _ref => {\n      let {\n        target\n      } = _ref;\n      const csv = Papa.parse(target.result, {\n        header: true\n      });\n      const parsedData = csv === null || csv === void 0 ? void 0 : csv.data;\n      const columns = Object.keys(parsedData[0]);\n      setData(parsedData);\n      console.log(parsedData);\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: classes.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Localization System Visualization Comparison Tool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(HeaderCartButton, {\n        onClick: handleParse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(HeaderInput, {\n        onChange: handleFileChange,\n        id: \"csvInput\",\n        name: \"file\",\n        type: \"File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes['main-image'],\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: backgroundImage,\n        alt: \"Localization data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 12\n  }, this);\n};\n_s(Header, \"y7kdyrePqAe2czxZAREC4Qqp7uE=\");\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","Fragment","classes","backgroundImage","HeaderCartButton","HeaderInput","Papa","allowedExtensions","Header","props","data","setData","error","setError","file","setFile","handleFileChange","e","target","files","length","inputFile","fileExtension","type","split","includes","handleParse","reader","FileReader","onload","csv","parse","result","header","parsedData","columns","Object","keys","console","log","readAsText"],"sources":["/Users/jonathanswindell/Documents/Base/Academics/2022-2023 Senior/Spring Semester/CPE 496 Senior Design 2/GoogleMaps/src/components/Layout/Header.js"],"sourcesContent":["import React, { useState, Fragment } from \"react\";\r\nimport classes from './Header.module.css';\r\nimport backgroundImage from '../../assets/background.jpg';\r\nimport HeaderCartButton from \"./HeaderCartButton\";\r\nimport HeaderInput from \"./HeaderInput\";\r\nimport Papa from \"papaparse\";\r\n \r\n// Allowed extensions for input file\r\nconst allowedExtensions = [\"csv\"];\r\n\r\nconst Header = (props) => {\r\n        // This state will store the parsed data\r\n    const [data, setData] = useState([]);\r\n        \r\n    // It state will contain the error when\r\n    // correct file extension is not used\r\n    const [error, setError] = useState(\"\");\r\n    \r\n    // It will store the file uploaded by the user\r\n    const [file, setFile] = useState(\"\");\r\n\r\n    \r\n   // This function will be called when\r\n    // the file input changes\r\n    const handleFileChange = (e) => {\r\n        setError(\"\");\r\n         \r\n        // Check if user has entered the file\r\n        if (e.target.files.length) {\r\n            const inputFile = e.target.files[0];\r\n             \r\n            // Check the file extensions, if it not\r\n            // included in the allowed extensions\r\n            // we show the error\r\n            const fileExtension = inputFile?.type.split(\"/\")[1];\r\n            if (!allowedExtensions.includes(fileExtension)) {\r\n                setError(\"Please input a csv file\");\r\n                return;\r\n            }\r\n            // If input type is correct set the state\r\n            setFile(inputFile);\r\n        }\r\n    };\r\n    \r\nconst handleParse = () => {\r\n         \r\n    // If user clicks the parse button without\r\n    // a file we show a error\r\n    if (!file) return setError(\"Enter a valid file\");\r\n\r\n    // Initialize a reader which allows user\r\n    // to read any file or blob.\r\n    const reader = new FileReader();\r\n     \r\n    // Event listener on reader when the file\r\n    // loads, we parse it and set the data.\r\n    reader.onload = async ({ target }) => {\r\n        const csv = Papa.parse(target.result, { header: true });\r\n        const parsedData = csv?.data;\r\n        const columns = Object.keys(parsedData[0]);\r\n        setData(parsedData);\r\n        console.log(parsedData)\r\n\r\n    };\r\n    reader.readAsText(file);\r\n};\r\n\r\n\r\n    return <Fragment>\r\n        <header className={classes.header}>\r\n            <h1>Localization System Visualization Comparison Tool</h1>\r\n            <HeaderCartButton onClick={handleParse} />\r\n            <HeaderInput\r\n                onChange={handleFileChange}\r\n                id=\"csvInput\"\r\n                name=\"file\"\r\n                type=\"File\"\r\n            />\r\n        </header>\r\n        <div className={classes['main-image']}>\r\n            <img src={backgroundImage} alt=\"Localization data\"/>\r\n        </div>\r\n    </Fragment>\r\n};\r\n\r\nexport default Header;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AACjD,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AAAA;AACA,MAAMC,iBAAiB,GAAG,CAAC,KAAK,CAAC;AAEjC,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAAA;EAClB;EACJ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA;EACA,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAGrC;EACC;EACA,MAAMgB,gBAAgB,GAAIC,CAAC,IAAK;IAC5BJ,QAAQ,CAAC,EAAE,CAAC;;IAEZ;IACA,IAAII,CAAC,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,EAAE;MACvB,MAAMC,SAAS,GAAGJ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;;MAEnC;MACA;MACA;MACA,MAAMG,aAAa,GAAGD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnD,IAAI,CAACjB,iBAAiB,CAACkB,QAAQ,CAACH,aAAa,CAAC,EAAE;QAC5CT,QAAQ,CAAC,yBAAyB,CAAC;QACnC;MACJ;MACA;MACAE,OAAO,CAACM,SAAS,CAAC;IACtB;EACJ,CAAC;EAEL,MAAMK,WAAW,GAAG,MAAM;IAEtB;IACA;IACA,IAAI,CAACZ,IAAI,EAAE,OAAOD,QAAQ,CAAC,oBAAoB,CAAC;;IAEhD;IACA;IACA,MAAMc,MAAM,GAAG,IAAIC,UAAU,EAAE;;IAE/B;IACA;IACAD,MAAM,CAACE,MAAM,GAAG,cAAsB;MAAA,IAAf;QAAEX;MAAO,CAAC;MAC7B,MAAMY,GAAG,GAAGxB,IAAI,CAACyB,KAAK,CAACb,MAAM,CAACc,MAAM,EAAE;QAAEC,MAAM,EAAE;MAAK,CAAC,CAAC;MACvD,MAAMC,UAAU,GAAGJ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEpB,IAAI;MAC5B,MAAMyB,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC;MAC1CvB,OAAO,CAACuB,UAAU,CAAC;MACnBI,OAAO,CAACC,GAAG,CAACL,UAAU,CAAC;IAE3B,CAAC;IACDP,MAAM,CAACa,UAAU,CAAC1B,IAAI,CAAC;EAC3B,CAAC;EAGG,oBAAO,QAAC,QAAQ;IAAA,wBACZ;MAAQ,SAAS,EAAEZ,OAAO,CAAC+B,MAAO;MAAA,wBAC9B;QAAA,UAAI;MAAiD;QAAA;QAAA;QAAA;MAAA,QAAK,eAC1D,QAAC,gBAAgB;QAAC,OAAO,EAAEP;MAAY;QAAA;QAAA;QAAA;MAAA,QAAG,eAC1C,QAAC,WAAW;QACR,QAAQ,EAAEV,gBAAiB;QAC3B,EAAE,EAAC,UAAU;QACb,IAAI,EAAC,MAAM;QACX,IAAI,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QACb;IAAA;MAAA;MAAA;MAAA;IAAA,QACG,eACT;MAAK,SAAS,EAAEd,OAAO,CAAC,YAAY,CAAE;MAAA,uBAClC;QAAK,GAAG,EAAEC,eAAgB;QAAC,GAAG,EAAC;MAAmB;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAClD;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AACf,CAAC;AAAC,GAzEIK,MAAM;AAAA,KAANA,MAAM;AA2EZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module"}