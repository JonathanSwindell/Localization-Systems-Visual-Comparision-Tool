{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport default function variance(values, valueof) {\n  var count = 0;\n  var delta;\n  var mean = 0;\n  var sum = 0;\n  if (valueof === undefined) {\n    var _iterator = _createForOfIteratorHelper(values),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        if (value != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    var index = -1;\n    var _iterator2 = _createForOfIteratorHelper(values),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _value = _step2.value;\n        if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {\n          delta = _value - mean;\n          mean += delta / ++count;\n          sum += delta * (_value - mean);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}","map":{"version":3,"names":["variance","values","valueof","count","delta","mean","sum","undefined","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","e","f","index","_iterator2","_step2"],"sources":["/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/d3-array/src/variance.js"],"sourcesContent":["export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n"],"mappings":";AAAA,eAAe,SAASA,QAAQA,CAACC,MAAM,EAAEC,OAAO,EAAE;EAChD,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK;EACT,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIJ,OAAO,KAAKK,SAAS,EAAE;IAAA,IAAAC,SAAA,GAAAC,0BAAA,CACPR,MAAM;MAAAS,KAAA;IAAA;MAAxB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA0B;QAAA,IAAjBC,KAAK,GAAAJ,KAAA,CAAAI,KAAA;QACZ,IAAIA,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,GAAG,CAACA,KAAK,KAAKA,KAAK,EAAE;UAC9CV,KAAK,GAAGU,KAAK,GAAGT,IAAI;UACpBA,IAAI,IAAID,KAAK,GAAG,EAAED,KAAK;UACvBG,GAAG,IAAIF,KAAK,IAAIU,KAAK,GAAGT,IAAI,CAAC;QAC/B;MACF;IAAC,SAAAU,GAAA;MAAAP,SAAA,CAAAQ,CAAA,CAAAD,GAAA;IAAA;MAAAP,SAAA,CAAAS,CAAA;IAAA;EACH,CAAC,MAAM;IACL,IAAIC,KAAK,GAAG,CAAC,CAAC;IAAC,IAAAC,UAAA,GAAAV,0BAAA,CACGR,MAAM;MAAAmB,MAAA;IAAA;MAAxB,KAAAD,UAAA,CAAAR,CAAA,MAAAS,MAAA,GAAAD,UAAA,CAAAP,CAAA,IAAAC,IAAA,GAA0B;QAAA,IAAjBC,MAAK,GAAAM,MAAA,CAAAN,KAAA;QACZ,IAAI,CAACA,MAAK,GAAGZ,OAAO,CAACY,MAAK,EAAE,EAAEI,KAAK,EAAEjB,MAAM,CAAC,KAAK,IAAI,IAAI,CAACa,MAAK,GAAG,CAACA,MAAK,KAAKA,MAAK,EAAE;UAClFV,KAAK,GAAGU,MAAK,GAAGT,IAAI;UACpBA,IAAI,IAAID,KAAK,GAAG,EAAED,KAAK;UACvBG,GAAG,IAAIF,KAAK,IAAIU,MAAK,GAAGT,IAAI,CAAC;QAC/B;MACF;IAAC,SAAAU,GAAA;MAAAI,UAAA,CAAAH,CAAA,CAAAD,GAAA;IAAA;MAAAI,UAAA,CAAAF,CAAA;IAAA;EACH;EACA,IAAId,KAAK,GAAG,CAAC,EAAE,OAAOG,GAAG,IAAIH,KAAK,GAAG,CAAC,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}