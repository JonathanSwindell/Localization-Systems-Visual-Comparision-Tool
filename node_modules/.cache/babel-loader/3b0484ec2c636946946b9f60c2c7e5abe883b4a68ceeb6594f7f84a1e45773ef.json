{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { blur2, max, ticks } from \"d3-array\";\nimport { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport Contours from \"./contours.js\";\nfunction defaultX(d) {\n  return d[0];\n}\nfunction defaultY(d) {\n  return d[1];\n}\nfunction defaultWeight() {\n  return 1;\n}\nexport default function () {\n  var x = defaultX,\n    y = defaultY,\n    weight = defaultWeight,\n    dx = 960,\n    dy = 500,\n    r = 20,\n    // blur radius\n    k = 2,\n    // log2(grid cell size)\n    o = r * 3,\n    // grid offset, to pad for blur\n    n = dx + o * 2 >> k,\n    // grid width\n    m = dy + o * 2 >> k,\n    // grid height\n    threshold = constant(20);\n  function grid(data) {\n    var values = new Float32Array(n * m),\n      pow2k = Math.pow(2, -k),\n      i = -1;\n    var _iterator = _createForOfIteratorHelper(data),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var d = _step.value;\n        var xi = (x(d, ++i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n        if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {\n          var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n          values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n          values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n          values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n          values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    blur2({\n      data: values,\n      width: n,\n      height: m\n    }, r * pow2k);\n    return values;\n  }\n  function density(data) {\n    var values = grid(data),\n      tz = threshold(values),\n      pow4k = Math.pow(2, 2 * k);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = ticks(Number.MIN_VALUE, max(values) / pow4k, tz);\n    }\n    return Contours().size([n, m]).thresholds(tz.map(function (d) {\n      return d * pow4k;\n    }))(values).map(function (c, i) {\n      return c.value = +tz[i], transform(c);\n    });\n  }\n  density.contours = function (data) {\n    var values = grid(data),\n      contours = Contours().size([n, m]),\n      pow4k = Math.pow(2, 2 * k),\n      contour = function contour(value) {\n        value = +value;\n        var c = transform(contours.contour(values, value * pow4k));\n        c.value = value; // preserve exact threshold value\n        return c;\n      };\n    Object.defineProperty(contour, \"max\", {\n      get: function get() {\n        return max(values) / pow4k;\n      }\n    });\n    return contour;\n  };\n  function transform(geometry) {\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n  function resize() {\n    o = r * 3;\n    n = dx + o * 2 >> k;\n    m = dy + o * 2 >> k;\n    return density;\n  }\n  density.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n  density.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n  density.weight = function (_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0],\n      _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n  density.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n  density.bandwidth = function (_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();\n  };\n  return density;\n}","map":{"version":3,"names":["blur2","max","ticks","slice","constant","Contours","defaultX","d","defaultY","defaultWeight","x","y","weight","dx","dy","r","k","o","n","m","threshold","grid","data","values","Float32Array","pow2k","Math","pow","i","_iterator","_createForOfIteratorHelper","_step","s","done","value","xi","yi","wi","x0","floor","y0","xt","yt","err","e","f","width","height","density","tz","pow4k","Array","isArray","Number","MIN_VALUE","size","thresholds","map","c","transform","contours","contour","Object","defineProperty","get","geometry","coordinates","forEach","transformPolygon","transformRing","transformPoint","resize","_","arguments","length","_0","_1","Error","cellSize","log","LN2","call","bandwidth","sqrt"],"sources":["/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/d3-contour/src/density.js"],"sourcesContent":["import {blur2, max, ticks} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport constant from \"./constant.js\";\nimport Contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function grid(data) {\n    var values = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k),\n        i = -1;\n\n    for (const d of data) {\n      var xi = (x(d, ++i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n      if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    }\n\n    blur2({data: values, width: n, height: m}, r * pow2k);\n    return values;\n  }\n\n  function density(data) {\n    var values = grid(data),\n        tz = threshold(values),\n        pow4k = Math.pow(2, 2 * k);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = ticks(Number.MIN_VALUE, max(values) / pow4k, tz);\n    }\n\n    return Contours()\n        .size([n, m])\n        .thresholds(tz.map(d => d * pow4k))\n      (values)\n        .map((c, i) => (c.value = +tz[i], transform(c)));\n  }\n\n  density.contours = function(data) {\n    var values = grid(data),\n        contours = Contours().size([n, m]),\n        pow4k = Math.pow(2, 2 * k),\n        contour = value => {\n          value = +value;\n          var c = transform(contours.contour(values, value * pow4k));\n          c.value = value; // preserve exact threshold value\n          return c;\n        };\n    Object.defineProperty(contour, \"max\", {get: () => max(values) / pow4k});\n    return contour;\n  };\n\n  function transform(geometry) {\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();\n  };\n\n  return density;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}