{"ast":null,"code":"import _slicedToArray from \"/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar e10 = Math.sqrt(50),\n  e5 = Math.sqrt(10),\n  e2 = Math.sqrt(2);\nfunction tickSpec(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n    power = Math.floor(Math.log10(step)),\n    error = step / Math.pow(10, power),\n    factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  var i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  var reverse = stop < start,\n    _ref = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count),\n    _ref2 = _slicedToArray(_ref, 3),\n    i1 = _ref2[0],\n    i2 = _ref2[1],\n    inc = _ref2[2];\n  if (!(i2 >= i1)) return [];\n  var n = i2 - i1 + 1,\n    ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (var i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;else for (var _i = 0; _i < n; ++_i) ticks[_i] = (i2 - _i) * inc;\n  } else {\n    if (inc < 0) for (var _i2 = 0; _i2 < n; ++_i2) ticks[_i2] = (i1 + _i2) / -inc;else for (var _i3 = 0; _i3 < n; ++_i3) ticks[_i3] = (i1 + _i3) * inc;\n  }\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  var reverse = stop < start,\n    inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}","map":{"version":3,"names":["e10","Math","sqrt","e5","e2","tickSpec","start","stop","count","step","max","power","floor","log10","error","pow","factor","i1","i2","inc","round","ticks","reverse","_ref","_ref2","_slicedToArray","n","Array","i","tickIncrement","tickStep"],"sources":["/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/d3-array/src/ticks.js"],"sourcesContent":["const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}