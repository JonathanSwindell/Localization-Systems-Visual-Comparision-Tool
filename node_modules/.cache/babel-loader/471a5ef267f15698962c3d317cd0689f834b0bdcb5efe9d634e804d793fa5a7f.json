{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { InternMap } from \"internmap\";\nimport identity from \"./identity.js\";\nexport default function group(values) {\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n  return nest(values, identity, identity, keys);\n}\nexport function groups(values) {\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n  return nest(values, Array.from, identity, keys);\n}\nfunction flatten(groups, keys) {\n  for (var i = 1, n = keys.length; i < n; ++i) {\n    groups = groups.flatMap(function (g) {\n      return g.pop().map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        return [].concat(_toConsumableArray(g), [key, value]);\n      });\n    });\n  }\n  return groups;\n}\nexport function flatGroup(values) {\n  for (var _len3 = arguments.length, keys = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    keys[_key3 - 1] = arguments[_key3];\n  }\n  return flatten(groups.apply(void 0, [values].concat(keys)), keys);\n}\nexport function flatRollup(values, reduce) {\n  for (var _len4 = arguments.length, keys = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    keys[_key4 - 2] = arguments[_key4];\n  }\n  return flatten(rollups.apply(void 0, [values, reduce].concat(keys)), keys);\n}\nexport function rollup(values, reduce) {\n  for (var _len5 = arguments.length, keys = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n    keys[_key5 - 2] = arguments[_key5];\n  }\n  return nest(values, identity, reduce, keys);\n}\nexport function rollups(values, reduce) {\n  for (var _len6 = arguments.length, keys = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n    keys[_key6 - 2] = arguments[_key6];\n  }\n  return nest(values, Array.from, reduce, keys);\n}\nexport function index(values) {\n  for (var _len7 = arguments.length, keys = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n    keys[_key7 - 1] = arguments[_key7];\n  }\n  return nest(values, identity, unique, keys);\n}\nexport function indexes(values) {\n  for (var _len8 = arguments.length, keys = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    keys[_key8 - 1] = arguments[_key8];\n  }\n  return nest(values, Array.from, unique, keys);\n}\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    var groups = new InternMap();\n    var keyof = keys[i++];\n    var index = -1;\n    var _iterator = _createForOfIteratorHelper(values),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        var key = keyof(value, ++index, values);\n        var _group = groups.get(key);\n        if (_group) _group.push(value);else groups.set(key, [value]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var _iterator2 = _createForOfIteratorHelper(groups),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          _key9 = _step2$value[0],\n          _values = _step2$value[1];\n        groups.set(_key9, regroup(_values, i));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return map(groups);\n  }(values, 0);\n}","map":{"version":3,"names":["InternMap","identity","group","values","_len","arguments","length","keys","Array","_key","nest","groups","_len2","_key2","from","flatten","i","n","flatMap","g","pop","map","_ref","_ref2","_slicedToArray","key","value","concat","_toConsumableArray","flatGroup","_len3","_key3","apply","flatRollup","reduce","_len4","_key4","rollups","rollup","_len5","_key5","_len6","_key6","index","_len7","_key7","unique","indexes","_len8","_key8","Error","regroup","keyof","_iterator","_createForOfIteratorHelper","_step","s","done","get","push","set","err","e","f","_iterator2","_step2","_step2$value"],"sources":["/Users/tqd0002/Documents/GitHub/TelemetryVisualization/node_modules/d3-array/src/group.js"],"sourcesContent":["import {InternMap} from \"internmap\";\nimport identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nfunction flatten(groups, keys) {\n  for (let i = 1, n = keys.length; i < n; ++i) {\n    groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));\n  }\n  return groups;\n}\n\nexport function flatGroup(values, ...keys) {\n  return flatten(groups(values, ...keys), keys);\n}\n\nexport function flatRollup(values, reduce, ...keys) {\n  return flatten(rollups(values, reduce, ...keys), keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nexport function index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nexport function indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}